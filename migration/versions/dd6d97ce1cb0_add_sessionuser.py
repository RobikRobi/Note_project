"""add SessionUser

Revision ID: dd6d97ce1cb0
Revises: 82529fc6d974
Create Date: 2025-10-13 06:12:12.744434

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'dd6d97ce1cb0'
down_revision: Union[str, Sequence[str], None] = '82529fc6d974'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('login', sa.String(), nullable=False),
    sa.Column('password', sa.LargeBinary(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('login')
    )
    op.create_table('note',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('content', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notetags',
    sa.Column('note_id', sa.Integer(), nullable=False),
    sa.Column('tagse_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['note_id'], ['note.id'], ),
    sa.ForeignKeyConstraint(['tagse_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('note_id', 'tagse_id')
    )
    op.drop_table('notetags_table')
    op.drop_table('note_table')
    op.drop_table('user_table')
    op.drop_table('tags_table')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tags_table',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tags_table_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tags_table_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_table',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_table_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('login', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_table_pkey'),
    sa.UniqueConstraint('login', name='user_table_login_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('note_table',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('note_table_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user_table.id'], name='note_table_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='note_table_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('notetags_table',
    sa.Column('note_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tagse_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['note_id'], ['note_table.id'], name=op.f('notetags_table_note_id_fkey')),
    sa.ForeignKeyConstraint(['tagse_id'], ['tags_table.id'], name=op.f('notetags_table_tagse_id_fkey')),
    sa.PrimaryKeyConstraint('note_id', 'tagse_id', name=op.f('notetags_table_pkey'))
    )
    op.drop_table('notetags')
    op.drop_table('note')
    op.drop_table('user')
    op.drop_table('tags')
    # ### end Alembic commands ###
